"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import logging
import os
from pathlib import Path

import environ

# import sentry_sdk
import plasma.logs

# from sentry_sdk.integrations.django import DjangoIntegration


logger = logging.getLogger(__name__)

env = environ.Env()

plasma.logs.setup("citygroves", "backend")
logger.info("Starting citygroves.backend")

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = Path(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "m*t!qg*b#o#e)xla3@o*r$ytt@vdy5w=*0$v()y2uswcqtyb9i"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


class DB:
    NAME = env.str("DB_NAME")
    USER = env.str("DB_USER")
    PASSWORD = env.str("DB_PASSWORD")
    HOST = env.str("DB_HOST")
    PORT = env.str("DB_PORT")


INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "django_extensions",
    "corsheaders",
    "rest_framework",
    "django_filters",
    "tenants",
    "housing",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"
CORS_ORIGIN_ALLOW_ALL = True

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "backend.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": DB.NAME,
        "USER": DB.USER,
        "PASSWORD": DB.PASSWORD,
        "HOST": DB.HOST,
        "PORT": DB.PORT,
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "static"

STAGE = "local"


class Filter2(logging.Filter):
    def filter(self, record):
        record.namespace = "citygroves"
        record.app = "backend"
        return True


LOGGING = {
    "version": 1,
    "filters": {"app_filter": {"()": "backend.settings.Filter2"}},
    "handlers": {
        "graypy": {
            "level": "INFO",
            "class": "graypy.GELFTCPHandler",
            "host": "graylog-tcp.graylog",
            "port": 12201,
            "filters": ["app_filter"],
        }
    },
    "loggers": {
        "django": {"handlers": ["graypy"], "level": "INFO", "propagate": True},
        "django.request": {"handlers": ["graypy"], "level": "INFO", "propagate": True},
        "backend": {"handlers": ["graypy"], "level": "INFO"},
        "tenants": {"handlers": ["graypy"], "level": "INFO"},
        "housing": {"handlers": ["graypy"], "level": "INFO"},
        "celery": {"handlers": ["graypy"], "level": "INFO"},
    },
}

REST_FRAMEWORK = {"DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"]}

# class SENTRY:
#     DSN = env.str("SENTRY_DSN")


# sentry_sdk.init(
#         dsn=SENTRY.DSN,
#         environment=STAGE,
#         release="",
#         ignore_errors=[SystemExit],
#         integrations=[
#             DjangoIntegration(),
#         ],
#     )


class GMAIL:
    CLIENT_ID = env.str("GMAIL_CLIENT_ID")
    CLIENT_SECRET = env.str("GMAIL_CLIENT_SECRET")
    GOOGLE_AUTH_URI = env.str("GOOGLE_AUTH_URI")
    GOOGLE_TOKEN_URI = env.str("GOOGLE_TOKEN_URI")
    OWNER_EMAIL = env.str("OWNER_EMAIL")
    REFRESH_TOKEN = env.str("REFRESH_TOKEN")
